<?xml version="1.0" encoding="UTF-8" ?>
<package name="<%= Package.Identifier %>" xmlns="http://www.woltlab.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" <%
%>xsi:schemaLocation="http://www.woltlab.com http://www.woltlab.com/XSD/tornado/package.xsd">
    <packageinformation><%
    %><% for (let locale in Package.DisplayName) { %>
        <packagename<%
        %><% if (locale !== "inv") { %> language="<%= locale %>"<% } %>><%
            %><%= Package.DisplayName[locale] %><%
        %></packagename><% } %><%
    %><% for (let locale in Package.Description) { %>
        <packagedescription<%
    %><% if (locale !== "inv") { %> language="<%= locale %>"<% } %>><%
            %><%= Package.Description[locale] %><%
        %></packagedescription><% } %>
        <version><%= Package.Version %></version>
        <date><%
            %><%= (
                Package.Date.getFullYear() + "-" +
                (Package.Date.getMonth() + 1).toString().padStart(2, "0") + "-" +
                Package.Date.getDate().toString().padStart(2, "0"))
            %><%
        %></date>
    </packageinformation>
    <authorinformation>
        <author><%= Package.Author.Name %></author><%
    %><% if (Package.Author.URL) { %>
        <authorurl><%= Package.Author.URL %></authorurl><%
    %><% } %>
    </authorinformation><%
    %><% if (Package.RequiredPackages.length > 0) { %>
    <requiredpackages<% %>><%
        %><% for (let requiredPackage of Package.RequiredPackages) { %>
        <requiredpackage minversion="<%= requiredPackage.MinVersion %>"><%= requiredPackage.Identifier %></requiredpackage><%
        %><% } %>
    </requiredpackages><%
    %><% } %><%
    %><% if (Package.OptionalPackages.length > 0) { %>
    <optionalpackages<% %>><%
        %><% for (let optionalPackage of Package.OptionalPackages) { %>
        <optionalpackage file="<%= optionalPackage.FileName %>"><%= optionalPackage.Identifier %></optionalpackage><%
        %><% } %>
    </optionalpackages><%
    %><% } %><%
    %><% if (Package.ConflictingPackages.length > 0) { %>
    <excludedpackages<% %>><%
        %><% for (let conflictingPackage of Package.ConflictingPackages) { %>
        <excludedpackage version="<%= conflictingPackage.MinVersion %>"><%= conflictingPackage.Identifier %></excludedpackage><%
        %><% } %>
    </excludedpackages><%
    %><% } %><%
    %><% if (Package.InstallInstructions) { %>
    <instructions type="install"><%
        %><%-
                include(
                    "instructions.xml",
                    {
                        InstructionCollection: Package.InstallInstructions,
                        ThemesPath: ThemesPath,
                        ComponentsPath: ComponentsPath
                    });
        %>
    </instructions><%
    %><% } %><%
    %><% for (let instructionCollection of Package.UpdateInstructions) { %>
    <instructions type="update" fromversion="<%= instructionCollection.FromVersion %>"><%
        %><%- include(
            "instructions.xml",
            {
                InstructionCollection: instructionCollection,
                ThemesPath: ThemesPath,
                ComponentsPath: ComponentsPath
            }); %>
    </instructions><% } %>
</package>